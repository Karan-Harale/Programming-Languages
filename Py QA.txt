

Practice Exercise -1
Make a class that represents a bank account. Create four methods named set_details, display, withdraw and deposit.

In the set_details method, create two instance variables : name and balance. The default value for balance should be zero. In the display method, display the values of these two instance variables.

Both the methods withdraw and deposit have amount as parameter. Inside withdraw, subtract the amount from balance and inside deposit, add the amount to the balance.

Create two instances of this class and call the methods on those instances.


class Bank:
    def set_details(self,name,balance=0):
        self.name=name
        self.balance=balance
    
    def display(self):
        print("Name: ",self.name)
        print("Balance: ",self.balance)
    
    def withdraw(self,amount1):
        self.amount1=amount1
        self.balance-=self.amount1

    def deposite(self,amount2):
        self.amount2=amount2
        self.balance+=self.amount2
        self.display()


b1=Bank()

b1.set_details("Karan",5000)
b1.display()
b1.withdraw(500)
b1.deposite(21000)



Practice Exercise - 2
1. In the BankAccount class that you had created in the previous exercise, delete the set_details() method and create an __init__ method.



2. Create a class named Book with an __init__ method. Inside the __init__ method, create the instance variables isbn, title, author, publisher, pages, price, copies.

Create these four instance objects from this class.

book1 = Book('957-4-36-547417-1', 'Learn Physics','Stephen', 'CBC', 350, 200,10)
book2 = Book('652-6-86-748413-3', 'Learn Chemistry','Jack', 'CBC', 400, 220,20)
book3 = Book('957-7-39-347216-2', 'Learn Maths','John', 'XYZ', 500, 300,5)
book4 = Book('957-7-39-347216-2', 'Learn Biology','Jack', 'XYZ', 400, 200,6)
Write a method display that prints the isbn, title, price and number of copies of the book.



3. For the Book class that you have created, write a method named in_stock that returns True if number of copies is more than zero, otherwise it returns False.

Create another method named sell that decreases the number of copies by 1 if the book is in stock, otherwise it prints the message that the book is out of stock.

   

4. Create a list named books that contains the 4 Book instance objects that you have created in question 2. Iterate over this list using a for loop and call display() for each object in the list.

Write a list comprehension to create another list that contains title of books written by Jack.



5. In the Book class, create a property named price such that the price of a book cannot be less than 50 or more than 1000.



6. Make a class Fraction that contains two instance variables, nr and dr (nr stands for numerator and dr for denominator). Define an __init__ method that provides values for these instance variables. Make the denominator optional by providing a default argument of 1.

In the __init__ method, make the denominator positive if it is negative. For example  -2/-3 should be changed to 2/3 and 2/-3 to -2/3.

Write a method named show that prints numerator, then '/' and then the denominator.



7. Define a method named multiply that multiples two Fraction instance objects. For multiplying two fractions, you have to multiply the numerator with numerator and denominator with the denominator.

Inside the method, create a new instance object that is the product of the two fractions and return it. Write your method in such a way that it supports multiplication of a Fraction by an integer also.

Similarly define a method named add to add two Fraction instance objects. Sum of two fractions n1/d1 and n2/d2 is (n1*d2 + n2*d1) / (d1*d2). This method should also support addition of a Fraction by an integer.

Test your fraction class with this code.

f1 = Fraction(2,3)
f1.show()
f2 = Fraction(3,4)
f2.show()
f3 = f1.multiply(f2)
f3.show()
f3 = f1.add(f2)
f3.show()
f3 = f1.add(5) 
f3.show()
f3 = f1.multiply(5) 
f3.show()
The output that you should get is given below.

2/3

3/4

6/12

17/12

17/3

10/3



8. For the following class Product, create a read only property named selling_price that is calculated by deducting discount from the marked_price. The instance variable discount represents discount in percent.   

class Product():
    def __init__(self, id, marked_price, discount):
        self.id = id
        self.marked_price = marked_price
        self.discount = discount
    
    def display(self):
        print(self.id,  self.marked_price,  self.discount)
    
p1 = Product('X879', 400, 6)
p2 = Product('A234', 100, 5)
p3 = Product('B987', 990, 4)
p4 = Product('H456', 800, 6)


9. Suppose after some time, you want to give an additional 2% discount on a product, if its price is above 500. To incorporate this change, implement discount as a property in your Product class.



10. Write a Circle class with an instance variable named radius and a method named area. Create two more attributes named diameter and circumference and make them behave as read only attributes. 

Perform data validation on radius, user should not be allowed to assign a negative value to it.

For a circle

diameter =  2 * radius

circumference =  2 * 3.14 * radius

area =  3.14 * radius * radius

Solutions - 2
1.

class BankAccount:
    def __init__(self, name, balance=0):
        self.name = name
        self.balance = balance
 
    def display(self):
         print(self.name, self.balance)
 
    def withdraw(self, amount):
        self.balance -= amount
 
    def deposit(self, amount):
        self.balance += amount
    
a1 = BankAccount('Mike', 200)
a2 = BankAccount('Tom')
 
a1.display()
a2.display()
 
a1.withdraw(100)
a2.deposit(500)
 
a1.display()
a2.display()


2.

class Book:
    
    def __init__(self,isbn, title,author,publisher,pages,price,copies):
        self.isbn = isbn
        self.title = title
        self.author = author
        self.publisher = publisher
        self.pages = pages
        self.price = price
        self.copies = copies
   
    def display(self):
        print(self.title)
        print(f'ISBN : {self.isbn}')
        print(f'Price : {self.price}')
        print(f'Number of copies : {self.copies}')
        print('.' * 50)
 
book1 = Book('957-4-36-547417-1', 'Learn Physics','Stephen', 'CBC', 350, 200,10)
book2 = Book('652-6-86-748413-3', 'Learn Chemistry','Jack', 'CBC', 400, 220,20)
book3 = Book('957-7-39-347216-2', 'Learn Maths','John', 'XYZ', 500, 300,5)
book4 = Book('957-7-39-347216-2', 'Learn Biology','Jack', 'XYZ', 400, 200,6)
 
book1.display()
book2.display()
book3.display()
book4.display()
3.

def in_stock(self):
        return True if self.copies>0 else False
 
def sell(self):
        if self.in_stock():
            self.copies -= 1
        else:
            print('The book is out of stock')


4.

books = [book1, book2, book3, book4]
 
for book in books:
    book.display()
 
jack_books = [book.title for book in books if book.author == 'Jack']
 
print(jack_books)


5.

@property
 def price(self):
       return self._price
 
@price.setter
 def price(self, new_price):
      if 50 <= new_price <= 1000:
          self._price = new_price
      else:
           raise ValueError ('Price cannot be less than 10 or more than 500')


6.

class Fraction:
    def __init__(self,nr,dr=1):
        self.nr = nr
        self.dr = dr
        if self.dr < 0:    
            self.nr *= -1
            self.dr *= -1
 
    def show(self):
        print(f'{self.nr}/{self.dr}')
       
f1 = Fraction(2,3)
f1.show()
f2 = Fraction(2,-3)
f2.show()
f3 = Fraction(-5,-6)
f3.show()


7.

def multiply(self,other):
        if isinstance(other,int):
            other = Fraction(other)
        return Fraction(self.nr * other.nr , self.dr * other.dr)
 
def add(self,other):
        if isinstance(other,int):
            other = Fraction(other)
        return Fraction(self.nr * other.dr + other.nr * self.dr, self.dr * other.dr)


8.

class Product():
    def __init__(self, id, marked_price, discount):
        self.id = id
        self.marked_price = marked_price
        self.discount = discount
        
    @property
    def selling_price(self):
        return self.marked_price - 0.01 * self.discount * self.marked_price
    
    def display(self):
        print(self.id,  self.marked_price,  self.discount)
    
p1 = Product('A234', 100, 5)
p2 = Product('X879', 400, 6)
p3 = Product('B987', 990, 4)
p4 = Product('H456', 800, 6)
 
print(p1.id, p1.selling_price)
print(p2.id, p2.selling_price)
print(p3.id, p3.selling_price)
print(p4.id, p4.selling_price)
9.

class Product():
    def __init__(self, id, marked_price, discount):
        self.id = id
        self.marked_price = marked_price
        self._discount = discount
        
    @property
    def selling_price(self):
        return self.marked_price - 0.01 * self.discount * self.marked_price
 
    @property
    def discount(self):
        return self._discount+2 if self.marked_price > 500 else self._discount
 
    @discount.setter
    def discount(self, new_discount):
        self._discount = new_discount
        
    def display(self):
        print(self.id, self.marked_price, self.discount)
 
p1 = Product('A234', 100, 5)
p2 = Product('X879', 400, 6)
p3 = Product('B987', 990, 4)
p4 = Product('H456', 800, 6)
 
print(p1.id, p1.selling_price)
print(p2.id, p2.selling_price)
print(p3.id, p3.selling_price)
print(p4.id, p4.selling_price)
 
p4.discount = 10
print(p4.id, p4.selling_price)        
10.

 

   class Circle:
    def __init__(self, radius):
        self.radius = radius
 
    @property
    def radius(self):
        return self._radius
 
    @radius.setter
    def radius(self, new_radius):
        if new_radius > 0:
            self._radius = new_radius
        else:
            raise ValueError('Radius should be positive')
 
    @property
    def diameter(self):
        return self._radius * 2
 
    @property
    def circumference(self):
        return 2 * 3.14 * self._radius
 
    def area(self):
        return 3.14 * self._radius * self._radius
 
c1 = Circle(7)
print( c1.radius, c1.diameter, c1.circumference, c1.area() )




Practice Exercise - 3
1. This is a function to find the highest common factor of two numbers   

 def hcf(x,y):
        x=abs(x)
        y=abs(y)
        smaller = y if x>y else x
        s = smaller
        while s>0:
            if x%s==0 and y%s==0:
                break
            s-=1
        return s
Make it a static method in the Fraction class that you had written in earlier exercise.



2. In your Fraction class, write a private instance method _reduce that reduces a fraction to its lowest terms. To reduce a Fraction to its lowest terms you have to divide the numerator and denominator by the highest common factor. Call this method in __init__and also call it on the resultant fraction in methods multiply and add.



3. In the following class SalesPerson, add two class variables named total_revenue and names. The variable names should be a list that contains names of all salespersons and total_revenue should contain the total sales amount of all the salespersons. 

class SalesPerson:   
    def __init__(self,name,age):
        self.name = name
        self.age = age
        self.sales_amount = 0
 
    def make_sale(self,money):
        self.sales_amount += money
 
    def show(self):
        print(self.name, self.age, self.sales_amount)
 
s1 = SalesPerson('Bob', 25)
s2 = SalesPerson('Ted', 22)
s3 = SalesPerson('Jack', 27)
 
s1.make_sale(1000)
s1.make_sale(1200)
s2.make_sale(5000)
s3.make_sale(3000)
s3.make_sale(8000)
 
s1.show()
s2.show()
s3.show()


4. Add a class variable named domains to the following Employee class. Make this class variable a set and it should store all domain names used by employees.

class Employee:    
    def __init__(self,name,email):
        self.name = name
        self.email = email
   
   def display(self):
        print(self.name, self.email)
            
e1 = Employee('John','john@gmail.com')
e2 = Employee('Jack','jack@yahoo.com')
e3 = Employee('Jill','jill@outlook.com')
e4 = Employee('Ted','ted@yahoo.com')
e5 = Employee('Tim','tim@gmail.com')
e6 = Employee('Mike','mike@yahoo.com')


5. In the following Employee class, add a class variable named allowed_domains.

allowed_domains = {'yahoo.com', 'gmail.com', 'outlook.com'}
Whenever an email is assigned, if the domain named is not in allowed_domains, raise a RuntimeError.

class Employee:
 
    def __init__(self,name,email):
        self.name = name
        self.email = email
 
    def display(self):
        print(self.name, self.email)
 
e1 = Employee('John','john@gmail.com')
e2 = Employee('Jack','jack@yahoo.com')
e3 = Employee('Jill','jill@outlook.com')
e4 = Employee('Ted','ted@yahoo.com')
e5 = Employee('Tim','tim@xmail.com')
       

6. The following program shows implementation of Stack Abstract data type using list. In a stack, elements are pushed and popped from one end of the stack which is called the top of the stack.

This implementation has no maximum limit on the size of the stack. You have to introduce a maximum limit by adding a class variable named MAX_SIZE. In the push method, before inserting a new element, check the size of the stack and raise a RuntimeError if the stack is full. 

class Stack:        
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def size(self):
        return len(self.items)
 
    def push(self, item):
        self.items.append(item)
 
    def pop(self):
        if self.is_empty():
            raise RuntimeError("Stack is empty")
        return self.items.pop()
    
    def display(self):
        print(self.items)
 
if __name__ == "__main__":
    st = Stack()
 
    while True:
        print("1.Push") 
        print("2.Pop") 
        print("3.Peek") 
        print("4.Size")
        print("5.Display") 
        print("6.Quit")
         
        choice = int(input("Enter your choice : "))
 
        if choice == 1:
            x=int(input("Enter the element to be pushed : "))
            st.push(x) 
        elif choice == 2:
            x=st.pop() 
            print("Popped element is : " , x) 
        elif choice == 3:
            print("Element at the top is : " , st.peek()) 
        elif choice == 4:
            print("Size of stack " , st.size()) 
        elif choice == 5:
            st.display()         
        elif choice == 6:
          break;
        else:
          print("Wrong choice") 
        print() 


7. Class variables with immutable values can be used as defaults for instance variables. In the following BankAccount class, add an instance variable named bank in the __init__method. Add a class variable bank_name that will be used as default argument in the __init__  method for bank parameter.

class BankAccount:
 
    def __init__(self, name, balance=0):
        self.name = name
        self.balance = balance
        
    def display(self):
         print(self.name, self.balance)
 
    def withdraw(self, amount):
        self.balance -= amount
 
    def deposit(self, amount):
        self.balance += amount
    
a1 = BankAccount('Mike', 200)
a2 = BankAccount('Tom')
 
a1.display()
a2.display()



1. In the following class, write code for the methods __eq__, __lt__, __le__.



class Time:
    def __init__(self,h,m,s):
        self._h = h 
        self._m = m
        self._s = h
 
    #Read-only field accessors
    @property
    def hours(self):
        return self._h
 
    @property
    def minutes(self):
        return self._m
 
    @property
    def seconds(self):
        return self._s
 
def _cmp(time1,time2):
    if time1._h < time2._h:
        return 1
    if time1._h > time2._h:
        return -1
    if time1._m < time2._m:
        return 1
    if time1._m > time2._m:
        return -1
    if time1._s < time2._s:
        return 1
    if time1._s > time2._s:
        return -1
    return 0
 
       
t1 = Time(13, 10, 5)
t2 = Time(5, 15, 30)
t3 = Time(5, 15, 30)
print(t1 < t2)
print(t1 > t2)
print(t1 == t2)
print(t2 == t3)


2. Implement __add__ and __radd__ methods for the following class Length.

class Length:
    def __init__(self, feet, inches):
        self.feet = feet  
        self.inches = inches
 
    def __str__(self):
        return f'{self.feet} {self.inches}'
 
    def add_length(self,L):
       f = self.feet + L.feet
       i = self.inches + L.inches
       if i >= 12:
           i = i - 12
       f += 1
       return Length(f, i)
 
    def add_inches(self,inches):
       f = self.feet + inches // 12
       i = self.inches + inches % 12
       if i >= 12:
           i = i - 12
       f += 1
       return Length(f, i)
  
 
length1 = Length(2,10)
length2 = Length(3,5)
    
print(length1 + length2)
print(length1 + 2)
print(length1 + 20)
print(20 + length1)













answer





1.

def __eq__(self,other):
        return True if _cmp(self,other) == 0 else False
    
    def __lt__(self,other):
        return True if _cmp(self,other) == 1 else False
 
    def __le__(self,other):
        return True if (_cmp(self,other) == 0 or _cmp(self,other) == 1)  else False
2.

def __add__(self,other):
        if isinstance(other, Length):
            return self.add_length(other)
        if isinstance(other,int):
            return self.add_inches(other)
        else:
            return NotImplemented
 
    def __radd__(self,other):
      return self.__add__(other)
 



Practice Exercise - 5
1. Create a class named Course that has instance variables title, instructor, price, lectures, users(list type), ratings, avg_rating. Implement the methods __str__, new_user_enrolled, received_a_rating and show_details. From the above class, inherit two classes VideoCourse and PdfCourse. The class VideoCourse has instance variable length_video and PdfCourse has instance variable pages.

2. What is the output of this -

class Mother:
        def cook(self):
           print('Can cook pasta')
 
class Father:
        def cook(self):
             print('Can cook noodles')
 
class Daughter(Father, Mother):
          pass
 
class Son(Mother, Father):
         def cook(self):
             super().cook()
             print('Can cook butter chicken') 
 
d = Daughter()  
s = Son()
 
d.cook()
print()
s.cook()
3. What will be the output of this code -

class Person:
    def greet(self):
        print('I am a Person')
 
class Teacher(Person):
    def greet(self):
        Person.greet(self)    
        print('I am a Teacher')
 
class Student(Person):
    def greet(self):
        Person.greet(self)    
        print('I am a Student')
 
class TeachingAssistant(Student, Teacher):
     def greet(self):
         super().greet()
         print('I am a Teaching Assistant')
       
x = TeachingAssistant()
x.greet()
4. In the following inheritance hierarchy we have written code to add 'S' to id of Student, 'T' to id of Teacher and both 'T' and 'S' to id of Teaching Assistant. What will be the output of this code. If the code does not work as intended, what changes we need to make.

class Person:
    def __init__(self,id):
        self.id = id
        
class Teacher(Person):
    def __init__(self,id):
        Person.__init__(self,id)
        self.id += 'T'
    
class Student(Person):
    def __init__(self,id):
        Person.__init__(self,id)
        self.id += 'S'
   
class TeachingAssistant(Student, Teacher):
     def __init__(self,id):
        Student.__init__(self,id)
        Teacher.__init__(self,id)
       
x = TeachingAssistant('2675')
print(x.id)
y = Student('4567')
print(y.id)
z = Teacher('3421')
print(z.id)
p = Person('5749')
print(p.id)




Solutions - 5
1.

class Course:
    def __init__(self, title, instructor, lectures, price):
        self.title = title
        self.instructor = instructor
        self.price = price
        self.lectures = lectures
        self.users = []
        self.ratings = 0
        self.avg_rating = 0
        
    def __str__(self):
        return f'{self.title} by {self.instructor}'
    
    def new_user_enrolled(self, user):
        self.users.append(user)
 
    def received_a_rating(self, new_rating):
        self.avg_rating = (self.avg_rating * self.ratings + new_rating)/(self.ratings + 1)
        self.ratings += 1 
 
    def show_details(self):
        print('Course Title : ', self.title)
        print('Intructor : ', self.instructor)
        print('Price : ', self.price)
        print('Number of Lectures : ', self.lectures)
        print('Users : ', self.users)
        print('Average rating : ', self.avg_rating)
 
 
class VideoCourse(Course):
        def __init__(self,title,instructor,lectures,price,length_video):
        super().__init__(title,instructor,lectures,price)
        self.length_video = length_video
 
    def show_details(self):
        super().show_details()
        print('Video Length : ',  self.length_video)
        
        
class PdfCourse(Course):
    def __init__(self,title,instructor,lectures,price,pages):
        super().__init__(title,instructor,lectures,price)
        self.pages = pages
 
    def show_details(self):
        super().show_details()
        print('Number of pages : ',  self.pages)
 
 
vc = VideoCourse('Learn C++', 'Jack', 30, 50, 10)
vc.new_user_enrolled('Allen')
vc.new_user_enrolled('Max')
vc.new_user_enrolled('Tom')
vc.received_a _rating(3)
vc.received_a _rating(5)
vc.received_a _rating(4)
vc.show_details()
 
print()
 
pc = PdfCourse('Learn Java', 'Jim', 35, 50, 1000)
pc.new_user_enrolled('Allen')
pc.new_user_enrolled('Mary')
pc.new_user_enrolled('JIm')
pc.received_a_rating(5)
pc.received_a_rating(4)
pc.received_a_rating(4.5)
pc.show_details()
2.

Can cook noodles



Can cook pasta

Can cook butter chicken



3.

I am a Person

I am a Student

I am a Teaching Assistant



4.

This is the output that we get.

2675T

4567S

3421T

5749

Using the base class names can cause real bugs in multiple inheritance. If we use super, the problem will not occur.

class Person:
    def __init__(self,id):
        self.id = id
        
class Teacher(Person):
    def __init__(self,id):
        super().__init__(id)
        self.id += 'T'
    
class Student(Person):
    def __init__(self,id):
        super().__init__(id)
        self.id += 'S'
   
class TeachingAssistant(Student, Teacher):
     def __init__(self,id):
        super().__init__(id)
        
   
x = TeachingAssistant('2675')
print(x.id)
y = Student('4567')
print(y.id)
z = Teacher('3421')
print(z.id)
p = Person('5749')
print(p.id)
 
Output:

2675TS

4567S

3421T

5749



